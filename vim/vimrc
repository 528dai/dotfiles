scriptencoding utf-8

" Initialize
if &compatible | set nocompatible | endif

function! s:on_filetype() abort "{{{
  if execute('filetype') =~# 'OFF'
    " Lazy loading
    silent! filetype plugin indent on
    syntax enable
    filetype detect
  endif
endfunction " }}}

augroup MyAutoCmd " {{{
  autocmd!
  autocmd FileType,Syntax,BufNewFile,BufNew,BufRead *? call s:on_filetype()
  " カーソル位置記憶
  autocmd MyAutoCmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END "}}}

if has('vim_starting') && !empty(argv()) | call s:on_filetype() | endif

let g:vim_root = ($VIM_ROOT == '') ? '~/.vim' : $VIM_ROOT
let g:rc_dir = g:vim_root . '/rc'

execute 'set runtimepath^=' . fnameescape(g:vim_root)
execute 'set runtimepath^=' . fnameescape(g:rc_dir)

"-----------------------------------------------------------------

function! s:source_rc(path) abort " {{{
  let abspath = resolve(expand(g:rc_dir . '/' . a:path))
  execute 'source' fnameescape(abspath)
endfunction " }}}

if has('vim_starting')
  let g:startuptime = reltime()
  autocmd MyAutoCmd VimEnter * let g:startuptime = reltime(g:startuptime) | redraw | echomsg 'startuptime: ' . reltimestr(g:startuptime)

  call s:source_rc('init.vim')
endif

call s:source_rc('option.vim')
call s:source_rc('mappings.vim')

call s:source_rc('plug.vim')
call s:source_rc('plugins.vim')

"" Colorscheme: {{{
set background=dark
set t_Co=256
if &t_Co < 256
  colorscheme default
else
  try
    colorscheme hybrid_reverse
  catch
  endtry
endif
"" }}}

if !has('nvim') && has('gui_running')
  call s:source_rc('gui.vim')
endif

" Turn off Automatically comment out when line break
autocmd Filetype * set formatoptions-=ro

set secure


" vim: expandtab softtabstop=2 shiftwidth=2 foldmethod=marker
