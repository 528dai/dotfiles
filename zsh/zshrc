# Initialize
export ZSH_ROOT=~/dotfiles/zsh

if [ ! -f ~/.zshrc.zwc -o ~/.zshrc -nt ~/.zshrc.zwc ]; then
  zcompile ~/.zshrc
fi

export ZPLUG_ROOT=$ZSH_ROOT/zplug
export ZPLUG_HOME=$ZPLUG_ROOT  # zplug 側の都合で
if [[ ! -d $ZPLUG_ROOT ]];then
  git clone https://github.com/zplug/zplug $ZPLUG_ROOT
fi
source $ZPLUG_ROOT/init.zsh


# Emacs風のキーバインド
bindkey -e  # キーバインドを上書きする関係でここ


# Plugins
zplug 'mafredri/zsh-async'
zplug "chrissicool/zsh-256color"

zplug "zsh-users/zsh-completions",              defer:0
# 入力途中に候補をうっすら表示
zplug "zsh-users/zsh-autosuggestions",          defer:2, on:"zsh-users/zsh-completions"
# コマンドを種類ごとに色付け
zplug "zsh-users/zsh-syntax-highlighting",      defer:3, on:"zsh-users/zsh-autosuggestions"
# ヒストリの補完を強化する
zplug "zsh-users/zsh-history-substring-search", defer:3, on:"zsh-users/zsh-syntax-highlighting"

# git の補完を効かせる
zplug "plugins/git", from:oh-my-zsh

zplug "junegunn/fzf-bin", as:command, from:gh-r, rename-to:fzf
zplug "junegunn/fzf", as:command, use:"bin/fzf-tmux"
zplug "junegunn/fzf", use:"shell/*.zsh"

zplug "b4b4r07/enhancd", use:init.sh, on:"junegunn/fzf-bin"
zplug "b4b4r07/easy-oneliner", on:"junegunn/fzf-bin"


# Theme
zplug 'sindresorhus/pure', on:'mafredri/zsh-async', use:pure.zsh, as:theme

# 自分自身をプラグインとして管理
zplug "zplug/zplug", hook-build:'zplug --self-manage'

# Install plugins if there are plugins that have not been installed
# if ! zplug check --verbose; then
#   printf "Install? [y/N]: "
#   if read -q; then
#     echo; zplug install
#   fi
# fi

# Then, source plugins and add commands to $PATH
# zplug load --verbose
zplug load
#########################################################


# 環境変数
source $ZSH_ROOT/rc/env.zshrc

# 補完
source $ZSH_ROOT/rc/complement.zshrc

# History
source $ZSH_ROOT/rc/history.zshrc

# Alias
source $ZSH_ROOT/rc/alias.zshrc

# Local file
[ -f $ZSH_ROOT/rc/local.zshrc ] && source $ZSH_ROOT/rc/local.zshrc


#########################################################
## 拡張
# enhanced
ENHANCD_DISABLE_HOME=1

# easy-oneliner
export EASY_ONE_REFFILE=$ZSH_ROOT/easy-oneliner.txt

#########################################################
## その他設定
# プロンプトの色表示を有効にする
autoload -U colors
colors

# cdを省略する
setopt auto_cd

# Run pipenv shell automatically
function auto_pipenv_shell {
    if [ ! -n "${PIPENV_ACTIVE+1}" ]; then
        if [ -f "Pipfile" ] ; then
            pipenv shell
        fi
    fi
}

# cdの後に実行するコマンド
chpwd() {
  ls -G
  auto_pipenv_shell
}

# mkdirとcdを同時実行
function mkcd() {
  if [[ -d $1 ]]; then
    echo "$1 already exists!"
    cd $1
  else
    mkdir -p $1 && cd $1
  fi
}

# Mac command for Linux
if [ `uname` = "Linux" ]; then
  alias open='xdg-open 2>/dev/null'
  alias pbcopy='xsel --clipboard --input'
  alias pbpaste='xsel --clipboard --output'
fi

# My open()
function myopen() {
  if [ -p /dev/stdin ]; then  # パイプから来たら
    cat - | xargs open
  elif [ $# -ne 0 ]; then  # 引数有
    open "$@"
  else  # 引数無
    open .
  fi
}

# 実行時間が長いコマンドは秒数を表示する
REPORTTIME=3

# pyenv
eval "$(pyenv init -)"


# 起動時に自動的に tmux
# https://qiita.com/ssh0/items/a9956a74bff8254a606a
if [[ ! -n $TMUX && $- == *l* ]]; then
  FILTER=fzf
  ID="$(tmux list-sessions 2>/dev/null)"
  if [[ -z "$ID" ]]; then
    tmux new-session
  fi
  create_new_session="Create New Session"
  ID="$ID\n${create_new_session}:"
  ID="`echo $ID | $FILTER | cut -d: -f1`"
  if [[ "$ID" = "${create_new_session}" ]]; then
    tmux new-session
  elif [[ -n "$ID" ]]; then
    tmux attach-session -t "$ID"
  else
    :  # Start terminal normally
  fi
fi
