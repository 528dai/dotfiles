# Initialize
export ZSHRC_ROOT=~/dotfiles/zsh
export ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
autoload -Uz compinit && compinit

# Local init file
[ -f $ZSHRC_ROOT/rc/local_init.zshrc ] && source $ZSHRC_ROOT/rc/local_init.zshrc

# Emacs風のキーバインド
bindkey -e  # キーバインドを上書きする関係でここ

# Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p mkdir -p "$(dirname $ZINIT_HOME)" && command chmod g-rwX mkdir -p "$(dirname $ZINIT_HOME)"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$ZINIT_HOME/zinit.zsh"

autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
# End of Zinit's installer chunk

# Plugins
# color
zinit light "chrissicool/zsh-256color"

# fzf
zinit ice wait lucid as"command" src'shell/key-bindings.zsh'; zinit light "junegunn/fzf"
zinit ice from"gh-r" as"program" id-as"fzf-bin"; zinit light "junegunn/fzf"

# 補完
zinit ice wait lucid; zinit light "Aloxaf/fzf-tab"
# zsh-users/zsh-autosuggestions: 入力途中に候補をうっすら表示
# zsh-users/zsh-syntax-highlighting: コマンドを種類ごとに色付け
# zsh-users/zsh-history-substring-searc: ヒストリの補完を強化する
zinit wait blockf lucid light-mode for \
  "zsh-users/zsh-completions" \
  "zsh-users/zsh-autosuggestions" \
  "zsh-users/zsh-syntax-highlighting" \
  "zsh-users/zsh-history-substring-search" \

# シンタックスハイライト
zinit ice wait lucid; zinit light "zdharma-continuum/fast-syntax-highlighting"

zinit light 'b4b4r07/easy-oneliner'

# 見やすいls
zinit ice as"program" from"gh-r" pick"bin/exa"
zinit light ogham/exa

# 見やすいcat
zinit ice as"program" from"gh-r" mv"bat* -> bat" pick"bat/bat"
zinit light "sharkdp/bat"

# gitレポジトリをブラウザで開く
zinit ice wait lucid; zinit light "paulirish/git-open"

# Theme
zinit ice compile'(pure|async).zsh' pick'async.zsh' src'pure.zsh'; zinit light "sindresorhus/pure"
#########################################################


# 環境変数
source $ZSHRC_ROOT/rc/env.zshrc

# 補完
source $ZSHRC_ROOT/rc/complement.zshrc

# History
source $ZSHRC_ROOT/rc/history.zshrc

# Alias
source $ZSHRC_ROOT/rc/alias.zshrc

# Local file
[ -f $ZSHRC_ROOT/rc/local.zshrc ] && source $ZSHRC_ROOT/rc/local.zshrc


#########################################################
## 拡張
# fzf
if [[ $(command -v tmux) ]] then
  export FZF_TMUX=1
fi

# easy-oneliner
export EASY_ONE_REFFILE=$ZSHRC_ROOT/easy-oneliner.txt
#########################################################
## その他設定
# プロンプトの色表示を有効にする
autoload -U colors
colors

# cdを省略する
setopt auto_cd

# Run pipenv shell automatically
function auto_pipenv_shell {
    if [ ! -n "${PIPENV_ACTIVE+1}" ]; then
        if [ -f "Pipfile" ] ; then
            pipenv shell
        fi
    fi
}

# cdの後に実行するコマンド
chpwd() {
  ls -G
  auto_pipenv_shell
}

# mkdirとcdを同時実行
function mkcd() {
  if [[ -d $1 ]]; then
    echo "$1 already exists!"
    cd $1
  else
    mkdir -p $1 && cd $1
  fi
}

# Mac command for Linux
if [[ "$(uname -r)" == *microsoft* ]]; then  # WSL
  alias open='cmd.exe /c start $(wslpath -w .)'
  alias pbcopy='clip.exe'
  alias pbpaste='powershell.exe -Command Get-Clipboard'
elif [ `uname` = "Linux" ]; then
  alias open='xdg-open 2>/dev/null'
  alias pbcopy='xsel --clipboard --input'
  alias pbpaste='xsel --clipboard --output'
fi

# My open()
function myopen() {
  if [ -p /dev/stdin ]; then  # パイプから来たら
    cat - | xargs open
  elif [ $# -ne 0 ]; then  # 引数有
    open "$@"
  else  # 引数無
    open .
  fi
}

# 実行時間が長いコマンドは秒数を表示する
REPORTTIME=3

# 起動時に自動的に tmux
# https://qiita.com/ssh0/items/a9956a74bff8254a606a
if [[ ! -n $TMUX && $- == *l* ]]; then
  FILTER=fzf
  ID="$(tmux list-sessions 2>/dev/null)"
  if [[ -z "$ID" ]]; then
    tmux new-session
  fi
  create_new_session="Create New Session"
  ID="$ID\n${create_new_session}:"
  ID="`echo $ID | $FILTER | cut -d: -f1`"
  if [[ "$ID" = "${create_new_session}" ]]; then
    tmux new-session
  elif [[ -n "$ID" ]]; then
    tmux attach-session -t "$ID"
  else
    :  # Start terminal normally
  fi
fi

if [ ! -f ~/.zshrc.zwc -o ~/.zshrc -nt ~/.zshrc.zwc ]; then
  zcompile ~/.zshrc
fi
